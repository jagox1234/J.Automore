name: Copilot Chief Agent CI

on:
  push:
    paths:
      - 'extensions/copilot-chief-agent/**'
      - '.github/workflows/publish-copilot-chief-agent.yml'
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  package:
    if: ${{ !contains(github.event.head_commit.message, '[skip-agent]') }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Cache extension dependencies
        uses: actions/cache@v4
        with:
          path: extensions/copilot-chief-agent/node_modules
          key: copilot-chief-node-${{ hashFiles('extensions/copilot-chief-agent/package-lock.json') }}
          restore-keys: copilot-chief-node-

      - name: Install tooling
        run: |
          npm install -g @vscode/vsce

      - name: Get current version & last tag
        id: meta
        run: |
          CURR=$(jq -r .version extensions/copilot-chief-agent/package.json)
          echo "current=$CURR" >> $GITHUB_OUTPUT
          LAST_TAG=$(git describe --tags --abbrev=0 --match 'copilot-chief-agent-v*' 2>/dev/null || echo '')
          echo "last_tag=$LAST_TAG" >> $GITHUB_OUTPUT

      - name: Always auto bump patch
        id: bump
        run: |
          set -e
          CURR=${{ steps.meta.outputs.current }}
          IFS='.' read -r MA MI PA <<< "$CURR"
          PA=$((PA+1))
          NEW="$MA.$MI.$PA"
            jq ".version=\"$NEW\"" extensions/copilot-chief-agent/package.json > tmp.$$ && mv tmp.$$ extensions/copilot-chief-agent/package.json
          echo "version=$NEW" >> $GITHUB_OUTPUT
          echo "Bumped version to $NEW"
          git config user.name 'agent-bot'
          git config user.email 'agent-bot@users.noreply.github.com'
          git add extensions/copilot-chief-agent/package.json
          git commit -m "chore(agent): auto bump version to $NEW [skip-agent]" || echo 'No commit'
          git push || echo 'Push skipped'

      - name: Install dependencies (extension)
        working-directory: extensions/copilot-chief-agent
        run: npm install --no-audit --no-fund || true

      - name: Generate changelog section
        id: changelog
        run: |
          NEW_VER=${{ steps.bump.outputs.version }}
          LAST_TAG=${{ steps.meta.outputs.last_tag }}
          RANGE=""
          if [ -n "$LAST_TAG" ]; then RANGE="$LAST_TAG..HEAD"; fi
          LOG=$(git log $RANGE --pretty=format:'* %s (%h)' -- extensions/copilot-chief-agent || true)
          [ -z "$LOG" ] && LOG='* Cambios menores internos'
          {
            echo 'notes<<EOF'
            echo "## v$NEW_VER - $(date +%Y-%m-%d)"
            echo "$LOG"
            echo 'EOF'
          } >> $GITHUB_OUTPUT
          printf "## v%s - %s\n%s\n\n" "$NEW_VER" "$(date +%Y-%m-%d)" "$LOG" >> extensions/copilot-chief-agent/CHANGELOG.md
          git add extensions/copilot-chief-agent/CHANGELOG.md || true
          git commit -m "docs(agent): update changelog v$NEW_VER [skip-agent]" || echo 'No changelog commit'
          git push || echo 'Skip push'
      - name: Read final version
        id: finalver
        run: |
          FINAL=$(jq -r .version extensions/copilot-chief-agent/package.json)
          echo "version=$FINAL" >> $GITHUB_OUTPUT
          echo "Final version: $FINAL"

      - name: Create tag (if not exists)
        run: |
          VER=${{ steps.finalver.outputs.version }}
          TAG="copilot-chief-agent-v$VER"
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG ya existe";
          else
            git tag "$TAG"
            git push origin "$TAG"
          fi
      - name: Package VSIX (final)
        working-directory: extensions/copilot-chief-agent
        run: |
          rm -f *.vsix || true
          vsce package --no-yarn
          ls -l *.vsix || true

      - name: Debug list repo root
        run: |
          echo 'VSIX en subcarpeta:'
          ls -l extensions/copilot-chief-agent/*.vsix || true

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: copilot-chief-agent-vsix
          path: extensions/copilot-chief-agent/*.vsix

      - name: Prepare release notes file
        run: |
          printf "%s\n" "${{ steps.changelog.outputs.notes }}" > release-notes.md
          echo 'Contenido release-notes.md:'
          sed -n '1,120p' release-notes.md
      - name: Create or update GitHub Release (gh cli)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          VER=${{ steps.finalver.outputs.version }}
          TAG="copilot-chief-agent-v$VER"
          echo "Procesando release $TAG"
          # PequeÃ±a espera para que GitHub indexe el tag
          sleep 5
          if gh release view "$TAG" >/dev/null 2>&1; then
            echo "Release ya existe, subiendo/actualizando asset .vsix"
            gh release upload "$TAG" extensions/copilot-chief-agent/*.vsix --clobber
          else
            gh release create "$TAG" extensions/copilot-chief-agent/*.vsix -F release-notes.md -t "Copilot Chief Agent v$VER"
          fi
      - name: Verify release exists (debug)
        run: |
          TAG="copilot-chief-agent-v${{ steps.finalver.outputs.version }}"
          echo "Comprobando release para tag $TAG"
          curl -sSfL "https://api.github.com/repos/${{ github.repository }}/releases/tags/$TAG" | jq '.tag_name,.assets|length,.assets[].name' || echo 'No encontrado'
          echo 'Listado de tags:'
          git --no-pager tag -n --sort=-creatordate | head -n 15
